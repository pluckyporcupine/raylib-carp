(relative-include "raylib_helper.h")

(defdynamic-once raylib-library-path "D:\\Code\\CLibraries\\raylib-2.6.0-Win64-msvc15\\lib\\")

(windows-only
 (add-lib (str "/link " raylib-library-path "raylib.lib")))

;;general defines
(def ray-pi 3.14159265358979323846f)

(def deg2rad (/ ray-pi 180.0f))
(def rad2deg (/ 180.0f ray-pi))
(def max-touch-points 10)

;;compatibility define
(register-type VoidPtr)

;;struct defines
(register-type Vector2 [x Float, y Float])
(register-type Vector3 [x Float, y Float, z Float])
(register-type Vector4 [x Float, y Float, z Float, w Float])
(register-type Quaternion)

(register-type Matrix [m0 Float, m4 Float, m8 Float, m12 Float,
                       m1 Float, m5 Float, m9 Float, m13 Float,
                       m2 Float, m6 Float, m10 Float, m14 Float,
                       m3 Float, m7 Float, m11 Float, m15 Float])

(register-type Color [r Byte, g Byte, b Byte, a Byte])
(defmodule Color
  (register copy (Fn [&Color] Color)))

(register-type Rectangle [x Float, y Float, width Float, height Float])
(defmodule Rectangle
  (register copy (Fn [&Rectangle] Rectangle)))

(register-type Image [data VoidPtr, width Int, height Int, mipmaps Int, format Int])

(register-type Texture2D [id Uint32, width Int, height Int, mipmaps Int, format Int])
(register-type Texture)
(register-type TextureCubemap)

(register-type RenderTexture2D [id Uint32, texture Texture2D, depth Texture2D, depthTexture Bool])
(register-type RenderTexture)

(register-type NPatchInfo [sourceRec Rectangle, left Int, top Int, right Int, bottom Int, type Int])

(register-type CharInfo [value Int, offsetX Int, offsetY Int, advanceX Int, image Image])
(register-type Font [baseSize Int, charsCount Int, texture Texture2D, recs (Ptr Rectangle), chars (Ptr CharInfo)])
(register-type SpriteFont)

(register-type Camera3D [position Vector3, target Vector3, up Vector3, fovy Float, type Int])
(register-type Camera)
(register-type Camera2D [offset Vector2, target Vector2, rotation Float, zoom Float])

(register-type Mesh [vertexCount Int, triangleCount Int, vertices (Ptr Float), 
                     texcoords (Ptr Float), texcoords2 (Ptr Float), normals (Ptr Float),
                     tangents (Ptr Float), colors (Ptr Byte), indices (Ptr Uint16),
                     animVertices (Ptr Float), animNormals (Ptr Float), boneIds (Ptr Int),
                     boneWeights (Ptr Float), vaoId Uint32, vboId (Ptr Uint32)])

(register-type Shader [id Uint32, locs (Ptr Int)])

(register-type MaterialMap [texture Texture2D, color Color, value Float])
(register-type Material [shader Shader, maps (Ptr MaterialMap), params (Ptr Float)])

(register-type Transform [translation Vector3, rotation Quaternion, scale Vector3])
(register-type BoneInfo)
(defmodule BoneInfo
  (defn init [] ())
  (defn set-name [b n] b)
  (defn set-name! [b n] ())
  (defn update-name [b f] b)
  (defn update-name! [b f] ()))
(register-type Model [transform Matrix, meshCount Int, meshes (Ptr Mesh),
                      materialCount Int, materials (Ptr Material), meshMaterial (Ptr Int),
                      boneCount Int, bones (Ptr BoneInfo), bindPose (Ptr Transform)])
(register-type ModelAnimation [boneCount Int, bones (Ptr BoneInfo), frameCount Int, framePoses (Ptr (Ptr Transform))])

(register-type Ray [position Vector3, direction Vector3])
(register-type RayHitInfo [hit Bool, distance Float, position Vector3, normal Vector3])

(register-type BoundingBox [min Vector3, max Vector3])

(register-type Wave [sampleCount Uint32, sampleRate Uint32, sampleSize Uint32, channels Uint32, data VoidPtr])
(register-type RAudioBuffer)
(register-type AudioStream [sampleRate Uint32, sampleSize Uint32, channels Uint32, buffer (Ptr RAudioBuffer)])
(register-type Sound [sampleCount Uint32, stream AudioStream])
(register-type Music [ctxType Int, ctxData VoidPtr, sampleCount Uint32, loopCount Uint32, stream AudioStream])

(register-type VrDeviceInfo)

(defmodule Colors
  (register lightgray Color "LIGHTGRAY")
  (register gray Color "GRAY")
  (register darkgray Color "DARKGRAY")
  (register yellow Color "YELLOW")
  (register gold Color "GOLD")
  (register orange Color "ORANGE")
  (register pink Color "PINK")
  (register red Color "RED")
  (register maroon Color "MAROON")
  (register green Color "GREEN")
  (register lime Color "GREEN")
  (register darkgreen Color "DARKGREEN")
  (register skyblue Color "SKYBLUE")
  (register blue Color "BLUE")
  (register darkblue Color "DARKBLUE")
  (register purple Color "PURPLE")
  (register violet Color "VIOLET")
  (register darkpurple Color "DARKPURPLE")
  (register beige Color "BEIGE")
  (register brown Color "BROWN")
  (register darkbrown Color "DARKBROWN")

  (register white Color "WHITE")
  (register black Color "BLACK")
  (register blank Color "BLANK")
  (register magenta Color "MAGEN")
  (register raywhite Color "RAYWHITE"))

(defmodule ConfigFlag
  (register flag-reserved a "FLAG_RESERVED")
  (register flag-fullscreen-mode a "FLAG_FULLSCREEN_MODE")
  (register flag-window-resizable a "FLAG_WINDOW_RESIZABLE")
  (register flag-window-undecorated a "FLAG_WINDOW_UNDECORATED")
  (register flag-window-transparent a "FLAG_WINDOW_TRANSPARENT")
  (register flag-window-hidden a "FLAG_WINDOW_HIDDEN")
  (register flag-window-always-run a "FLAG_WINDOW_ALWAYS_RUN")
  (register flag-msaa-4x-hint a "FLAG_MSAA_4X_HINT")
  (register flag-vsync-hint a "FLAG_VSYNC_HINT"))

(defmodule TraceLogType
  (register log-all a "LOG_ALL")
  (register log-trace a "LOG_TRACE")
  (register log-debug a "LOG_DEBUG")
  (register log-info a "LOG_INFO")
  (register log-warning a "LOG_WARNING")
  (register log-error a "LOG_ERROR")
  (register log-fatal a "LOG_FATAL")
  (register log-none a "LOG_NONE"))

(defmodule KeyboardKey
  (register key-apostrophe a "KEY_APOSTROPHE")
  (register key-comma a "KEY_COMMA")
  (register key-minus a "KEY_MINUS")
  (register key-period a "KEY_PERIOD")
  (register key-slash a "KEY_SLASH")
  (register key-zero a "KEY_ZERO")
  (register key-one a "KEY_ONE")
  (register key-two a "KEY_TWO")
  (register key-three a "KEY_THREE")
  (register key-four a "KEY_FOUR")
  (register key-five a "KEY_FIVE")
  (register key-six a "KEY_SIX")
  (register key-seven a "KEY_SEVEN")
  (register key-eight a "KEY_EIGHT")
  (register key-nine a "KEY_NINE")
  (register key-semicolon a "KEY_SEMICOLON")
  (register key-equal a "KEY_EQUAL")
  (register key-a a "KEY_A")
  (register key-b a "KEY_B")
  (register key-c a "KEY_C")
  (register key-d a "KEY_D")
  (register key-e a "KEY_E")
  (register key-f a "KEY_F")
  (register key-g a "KEY_G")
  (register key-h a "KEY_H")
  (register key-i a "KEY_I")
  (register key-j a "KEY_J")
  (register key-k a "KEY_K")
  (register key-l a "KEY_L")
  (register key-m a "KEY_M")
  (register key-n a "KEY_N")
  (register key-o a "KEY_O")
  (register key-p a "KEY_P")
  (register key-q a "KEY_Q")
  (register key-r a "KEY_R")
  (register key-s a "KEY_S")
  (register key-t a "KEY_T")
  (register key-u a "KEY_U")
  (register key-v a "KEY_V")
  (register key-w a "KEY_W")
  (register key-x a "KEY_X")
  (register key-y a "KEY_Y")
  (register key-z a "KEY_Z")
  (register key-space a "KEY_SPACE")
  (register key-escape a "KEY_ESCAPE")
  (register key-tab a "KEY_TAB")
  (register key-backspace a "KEY_BACKSPACE")
  (register key-insert a "KEY_INSERT")
  (register key-delete a "KEY_DELETE")
  (register key-right a "KEY_RIGHT")
  (register key-left a "KEY_LEFT")
  (register key-down a "KEY_DOWN")
  (register key-up a "KEY_UP")
  (register key-page-up a "KEY_PAGE_UP")
  (register key-page-down a "KEY_PAGE_DOWN")
  (register key-home a "KEY_HOME")
  (register key-end a "KEY_END")
  (register key-caps-lock a "KEY_CAPS_LOCK")
  (register key-scroll-lock a "KEY_SCROLL_LOCK")
  (register key-num-lock a "KEY_NUM_LOCK")
  (register key-print-screen a "KEY_PRINT_SCREEN")
  (register key-pause a "KEY_PAUSE")
  (register key-f1 a "KEY_F1")
  (register key-f2 a "KEY_F2")
  (register key-f3 a "KEY_F3")
  (register key-f4 a "KEY_F4")
  (register key-f5 a "KEY_F5")
  (register key-f6 a "KEY_F6")
  (register key-f7 a "KEY_F7")
  (register key-f8 a "KEY_F8")
  (register key-f9 a "KEY_F9")
  (register key-f10 a "KEY_F10")
  (register key-f11 a "KEY_F11")
  (register key-f12 a "KEY_F12")
  (register key-left-shift a "KEY_LEFT_SHIFT")
  (register key-left-control a "KEY_LEFT_CONTROL")
  (register key-left-alt a "KEY_LEFT_ALT")
  (register key-left-super a "KEY_LEFT_SUPER")
  (register key-right-shift a "KEY_RIGHT_SHIFT")
  (register key-right-control a "KEY_RIGHT_CONTROL")
  (register key-right-alt a "KEY_RIGHT_ALT")
  (register key-right-super a "KEY_RIGHT_SUPER")
  (register key-kb-menu a "KEY_KB_MENU")
  (register key-left-bracket a "KEY_LEFT_BRACKET")
  (register key-backslash a "KEY_BACKSLASH")
  (register key-right-bracket a "KEY_RIGHT_BRACKET")
  (register key-grave a "KEY_GRAVE")
  (register key-kp-0 a "KEY_KP_0")
  (register key-kp-1 a "KEY_KP_1")
  (register key-kp-2 a "KEY_KP_2")
  (register key-kp-3 a "KEY_KP_3")
  (register key-kp-4 a "KEY_KP_4")
  (register key-kp-5 a "KEY_KP_5")
  (register key-kp-6 a "KEY_KP_6")
  (register key-kp-7 a "KEY_KP_7")
  (register key-kp-8 a "KEY_KP_8")
  (register key-kp-9 a "KEY_KP_9")
  (register key-kp-decimal a "KEY_KP_DECIMAL")
  (register key-kp-divide a "KEY_KP_DIVIDE")
  (register key-kp-multiply a "KEY_KP_MULTIPLY")
  (register key-kp-subtract a "KEY_KP_SUBTRACT")
  (register key-kp-add a "KEY_KP_ADD")
  (register key-kp-enter a "KEY_KP_ENTER")
  (register key-kp-equal a "KEY_KP_EQUAL"))

(defmodule AndroidButton
  (register key-back a "KEY_BACK")
  (register key-menu a "KEY_MENU")
  (register key-volume-up a "KEY_VOLUME_UP")
  (register key-volume-down a "KEY_VOLUME_DOWN"))

(defmodule MouseButton
  (register mouse-left-button a "MOUSE_LEFT_BUTTON")
  (register mouse-right-button a "MOUSE_RIGHT_BUTTON")
  (register mouse-middle-button a "MOUSE_MIDDLE_BUTTON"))

(defmodule GamepadNumber
  (register gamepad-player1 a "GAMEPAD_PLAYER1")
  (register gamepad-player2 a "GAMEPAD_PLAYER2")
  (register gamepad-player3 a "GAMEPAD_PLAYER3")
  (register gamepad-player4 a "GAMEPAD_PLAYER4"))

(defmodule GamepadButton
  (register gamepad-button-unknown a "GAMEPAD_BUTTON_UNKNOWN")
  (register gamepad-button-left-face-up a "GAMEPAD_BUTTON_LEFT_FACE_UP")
  (register gamepad-button-left-face-right a "GAMEPAD_BUTTON_LEFT_FACE_RIGHT")
  (register gamepad-button-left-face-down a "GAMEPAD_BUTTON_LEFT_FACE_DOWN")
  (register gamepad-button-left-face-left a "GAMEPAD_BUTTON_LEFT_FACE_LEFT")
  (register gamepad-button-right-face-up a "GAMEPAD_BUTTON_RIGHT_FACE_UP")
  (register gamepad-button-right-face-right a "GAMEPAD_BUTTON_RIGHT_FACE_RIGHT")
  (register gamepad-button-right-face-down a "GAMEPAD_BUTTON_RIGHT_FACE_DOWN")
  (register gamepad-button-right-face-left a "GAMEPAD_BUTTON_RIGHT_FACE_LEFT")
  (register gamepad-button-left-trigger-1 a "GAMEPAD_BUTTON_LEFT_TRIGGER_1")
  (register gamepad-button-left-trigger-2 a "GAMEPAD_BUTTON_LEFT_TRIGGER_2")
  (register gamepad-button-right-trigger-1 a "GAMEPAD_BUTTON_RIGHT_TRIGGER_1")
  (register gamepad-button-right-trigger-2 a "GAMEPAD_BUTTON_RIGHT_TRIGGER_2")
  (register gamepad-button-middle-left a "GAMEPAD_BUTTON_MIDDLE_LEFT")
  (register gamepad-button-middle a "GAMEPAD_BUTTON_MIDDLE")
  (register gamepad-button-middle-right a "GAMEPAD_BUTTON_MIDDLE_RIGHT")
  (register gamepad-button-left-thumb a "GAMEPAD_BUTTON_LEFT_THUMB")
  (register gamepad-button-right-thumb a "GAMEPAD_BUTTON_RIGHT_THUMB"))

(defmodule GamepadAxis
  (register gamepad-axis-unknown a "GAMEPAD_AXIS_UNKNOWN")
  (register gamepad-axis-left-x a "GAMEPAD_AXIS_LEFT_X")
  (register gamepad-axis-left-y a "GAMEPAD_AXIS_LEFT_Y")
  (register gamepad-axis-right-x a "GAMEPAD_AXIS_RIGHT_X")
  (register gamepad-axis-right-y a "GAMEPAD_AXIS_RIGHT_Y")
  (register gamepad-axis-left-trigger a "GAMEPAD_AXIST_LEFT_TRIGGER")
  (register gamepad-axis-right-trigger a "GAMEPAD_AXIS_RIGHT_TRIGGER"))

(defmodule ShaderLocationIndex
  (register loc-vertex-position a "LOC_VERTEX_POSITION")
  (register loc-vertex-texcoord01 a "LOC_VERTEX_TEXCOORD01")
  (register loc-vertex-texcoord02 a "LOC_VERTEX_TEXCOORD02")
  (register loc-vertex-normal a "LOC_VERTEX_NORMAL")
  (register loc-vertex-tangent a "LOC_VERTEX_TANGENT")
  (register loc-vertex-color a "LOC_VERTEX_COLOR")
  (register loc-matrix-mvp a "LOC_MATRIX_MVP")
  (register loc-matrix-model a "LOC_MATRIX_MODEL")
  (register loc-matrix-view a "LOC_MATRIX_VIEW")
  (register loc-matrix-projection a "LOC_MATRIX_PROJECTION")
  (register loc-vector-view a "LOC_VECTOR_VIEW")
  (register loc-color-diffuse a "LOC_COLOR_DIFFUSE")
  (register loc-color-specular a "LOC_COLOR_SPECULAR")
  (register loc-color-ambient a "LOC_COLOR_AMBIENT")
  (register loc-map-albedo a "LOC_MAP_ALBEDO")
  (register loc-map-metalness a "LOC_MAP_METALNESS")
  (register loc-map-normal a "LOC_MAP_NORMAL")
  (register loc-map-roughness a "LOC_MAP_ROUGHNESS")
  (register loc-map-occlusion a "LOC_MAP_OCCLUSION")
  (register loc-map-emission a "LOC_MAP_EMISSION")
  (register loc-map-height a "LOC_MAP_HEIGHT")
  (register loc-map-cubemap a "LOC_MAP_CUBEMAP")
  (register loc-map-irradiance a "LOC_MAP_IRRADIANCE")
  (register loc-map-prefilter a "LOC_MAP_PREFILTER")
  (register loc-map-brdf a "LOC_MAP_BRDF")
  (register loc-map-diffuse a "LOC_MAP_DIFFUSE")
  (register loc-map-specular a "LOC_MAP_SPECULAR"))

(defmodule ShaderUniformDataType
  (register uniform-float a "UNIFORM_FLOAT")
  (register uniform-vec2 a "UNIFORM_VEC2")
  (register uniform-vec3 a "UNIFORM_VEC3")
  (register uniform-vec4 a "UNIFORM_VEC4")
  (register uniform-int a "UNIFORM_INT")
  (register uniform-ivec2 a "UNIFORM_IVEC2")
  (register uniform-ivec3 a "UNIFORM_IVEC3")
  (register uniform-ivec4 a "UNIFORM_IVEC4")
  (register uniform-sampler2d a "UNIFORM_SAMPLER2D"))

(defmodule MaterialMapType
  (register map-albedo a "MAP_ALBEDO")
  (register map-metalness a "MAP_METALNESS")
  (register map-normal a "MAP_NORMAL")
  (register map-roughness a "MAP_ROUGHNESS")
  (register map-occlusion a "MAP_OCCLUSION")
  (register map-emission a "MAP_EMISSION")
  (register map-height a "MAP_HEIGHT")
  (register map-cubemap a "MAP_CUBEMAP")
  (register map-irradiance a "MAP_IRRADIANCE")
  (register map-prefilter a "MAP_PREFILTER")
  (register map-brdf a "MAP_BRDF")
  (register map-diffuse a "MAP_DIFFUSE")
  (register map-specular a "MAP_SPECULAR"))

(defmodule PixelFormat
  (register uncompressed-grayscale a "UNCOMPRESSED_GRAYSCALE")
  (register uncompressed-gray-alpha a "UNCOMPRESSED_GRAY_ALPHA")
  (register uncompressed-r5g6b5 a "UNCOMPRESSED_R5G6B5")
  (register uncompressed-r8g8b8 a "UNCOMPRESSED_R8G8B8")
  (register uncompressed-r5b5g5a1 a "UNCOMPRESSED_R5G5B5A1")
  (register uncompressed-r4g4b4a4 a "UNCOMPRESSED_R4G4B4A4")
  (register uncompressed-r8g8b8a8 a "UNCOMPRESSED_R8G8B8A8")
  (register uncompressed-r32 a "UNCOMPRESSED_R32")
  (register uncompressed-r32g32b32 a "UNCOMPRESSED_R32G32B32")
  (register uncompressed-r32g32b32a32 a "UNCOMPRESSED_R32G32B32A32")
  (register compressed-dxt1-rgb a "COMPRESSED_DXT1_RGB")
  (register compressed-dxt1-rgba a "COMPRESSED_DXT1_RGBA")
  (register compressed-dxt3-rgba a "COMPRESSED_DXT3_RGBA")
  (register compressed-dxt5-rgba a "COMPRESSED_DXT5_RGBA")
  (register compressed-etc1-rgb a "COMPRESSED_ETC1_RGB")
  (register compressed-etc2-rgb a "COMPRESSED_ETC2_RGB")
  (register compressed-etc2-eac-rgba a "COMPRESSED_ETC2_RAC_RGBA")
  (register compressed-pvrt-rgb a "COMPRESSED_PVRT_RGB")
  (register compressed-pvrt-rgba a "COMPRESSED_PVRT_RGBA")
  (register compressed-astc-4x4-rgba a "COMPRESSED_ASTC_4x4_RGBA")
  (register compressed-astc-8x8-rgba a "COMPRESSED_ASTC_8x8_RGBA"))

(defmodule TextureFilterMode
  (register filter-point a "FILTER_POINT")
  (register filter-bilinear a "FILTER_BILINEAR")
  (register filter-trilinear a "FILTER_TRILINEAR")
  (register filter-anisotropic-4x a "FILTER_ANISOTROPIC_4X")
  (register filter-anisotropic-8x a "FILTER_ANISOTROPIC_8X")
  (register filter-anisotropic-16x a "FILTER_ANISOTROPIC_16X"))

(defmodule CubemapLayoutType
  (register cubemap-auto-detect a "CUBEMAP_AUTO_DETECT")
  (register cubemap-line-vertical a "CUBEMAP_LINE_VERTICAL")
  (register cubemap-line-horizontal a "CUBEMAP_LINE_HORIZONAL")
  (register cubemap-cross-three-by-four a "CUBEMAP_CROSS_THREE_BY_FOUR")
  (register cubemap-cross-four-by-three a "CUBEMAP_CROSS_FOUR_BY_THREE")
  (register cubemap-panorama a "CUBEMAP_PANORAMA"))

(defmodule TextureWrapMode
  (register wrap-repeat a "WRAP_REPEAT")
  (register wrap-clamp a "WRAP_CLAMP")
  (register wrap-mirror-repeat a "WRAP_MIRROR_REPEAT")
  (register wrap-mirror-clamp a "WRAP_MIRROR_CLAMP"))

(defmodule FontType
  (register font-default a "FONT_DEFAULT")
  (register font-bitmap a "FONT_BITMAP")
  (register font-sdf a "FONT_SDF"))

(defmodule BlendMode
  (register blend-alpha a "BLEND_ALPHA")
  (register blend-additive a "BLEND_ADDITIVE")
  (register blend-multiplied a "BLEND_MULTIPLIED"))

(defmodule GestureType
  (register gesture-none a "GESTURE_NONE")
  (register gesture-tap a "GESTURE_TAP")
  (register gesture-doubletap a "GESTURE_DOUBLETAP")
  (register gesture-hold a "GESTURE_HOLD")
  (register gesture-drag a "GESTURE_DRAG")
  (register gesture-swipe-right a "GESTURE_SWIPE_RIGHT")
  (register gesture-swipe-left a "GESTURE_SWIPE_LEFT")
  (register gesture-swipe-up a "GESTURE_SWIPE_UP")
  (register gesture-swipe-down a "GESTURE_SWIPE_DOWN")
  (register gesture-pinch-in a "GESTURE_PINCH_IN")
  (register gesture-pinch-out a "GESTURE_PINCH_OUT"))

(defmodule CameraMode
  (register camera-custom a "CAMERA_CUSTOM")
  (register camera-free a "CAMERA_FREE")
  (register camera-orbital a "CAMERA_ORBITAL")
  (register camera-first-person a "CAMERA_FIRST_PERSON")
  (register camera-third-person a "CAMERA_THIRD_PERSON"))

(defmodule CameraType
  (register camera-perspective a "CAMERA_PERSPECTIVE")
  (register camera-orthographic a "CAMERA_ORTHOGRAPHIC"))

(defmodule NPatchType
  (register npt-9patch a "NPT_9PATCH")
  (register npt-3patch-vertical a "NPT_3PATCH_VERTICAL")
  (register npt-3patch-horizontal a "NPT_3PATCH_HORIZONTAL"))

;;need to figure out how to properly bind to TraceLogCallback typedef
(register-type TraceLogCallback)

(defmodule rlcore
  ;;window functions
  (register init-window (Fn [Int Int (Ptr Char)] ()) "InitWindow")
  (register window-should-close (Fn [] Bool) "WindowShouldClose")
  (register close-window (Fn [] ()) "CloseWindow")
  (register is-window-ready (Fn [] Bool) "IsWindowReady")
  (register is-window-minimized (Fn [] Bool) "IsWindowMinimized")
  (register is-window-resized (Fn [] Bool) "IsWindowResized")
  (register is-window-hidden (Fn [] Bool) "IsWindowHidden")
  (register toggle-fullscreen (Fn [] ()) "ToggleFullscreen")
  (register unhide-window (Fn [] ()) "UnhideWindow")
  (register hide-window (Fn [] ()) "HideWindow")
  (register set-window-icon (Fn [Image] ()) "SetWindowIcon")
  (register set-window-title (Fn [(Ptr Char)] ()) "SetWindowTitle")
  (register set-window-position (Fn [Int Int] ()) "SetWindowPosition")
  (register set-window-monitor (Fn [Int] ()) "SetWindowMonitor")
  (register set-window-min-size (Fn [Int Int] ()) "SetWindowMinSize")
  (register set-window-size (Fn [Int Int] ()) "SetWindowSize")
  (register get-window-handle (Fn [] VoidPtr) "GetWindowHandle")
  (register get-screen-width (Fn [] Int) "GetScreenWidth")
  (register get-screen-height (Fn [] Int) "GetScreenHeight")
  (register get-monitor-count (Fn [] Int) "GetMonitorCount")
  (register get-monitor-width (Fn [Int] Int) "GetMonitorWidth")
  (register get-monitor-height (Fn [Int] Int) "GetMonitorHeight")
  (register get-monitor-physical-width (Fn [Int] Int) "GetMonitorPhysicalWidth")
  (register get-monitor-physical-height (Fn [Int] Int) "GetMonitorPhysicalHeight")
  (register get-window-position (Fn [] Vector2) "GetWindowPosition")
  (register get-monitor-name (Fn [Int] (Ptr Char)) "GetMonitorName")
  (register get-clipboard-text (Fn [] (Ptr Char)) "GetClipboardText")
  (register set-clipboard-text (Fn [(Ptr Char)] ()) "SetClipboardText")
  
  ;;cursor functions
  (register show-cursor (Fn [] ()) "ShowCursor")
  (register hide-cursor (Fn [] ()) "HideCursor")
  (register is-cursor-hidden (Fn [] Bool) "IsCursorHidden")
  (register enable-cursor (Fn [] ()) "EnableCursor")
  (register disable-cursor (Fn [] ()) "DisableCursor")

  ;;drawing-related functions
  (register clear-background (Fn [Color] ()) "ClearBackground")
  (register begin-drawing (Fn [] ()) "BeginDrawing")
  (register end-drawing (Fn [] ()) "EndDrawing")
  (register begin-mode-2d (Fn [Camera2D] ()) "BeginMode2D")
  (register end-mode-2d (Fn [] ()) "EndMode2D")
  (register begin-mode-3d (Fn [Camera3D] ()) "BeginMode3D")
  (register end-mode-3d (Fn [] ()) "EndMode3D")
  (register begin-texture-mode (Fn [RenderTexture2D] ()) "BeginTextureMode")
  (register end-texture-mode (Fn [] ()) "EndTextureMode")
  (register begin-scissor-mode (Fn [Int Int Int Int] ()) "BeginScissorMode")
  (register end-scissor-mode (Fn [] ()) "EndScissorMode")
  
  ;;screen space functions
  (register get-mouse-ray (Fn [Vector2 Camera] Ray) "GetMouseRay")
  (register get-camera-matrix (Fn [Camera] Matrix) "GetCameraMatrix")
  (register get-camera-matrix-2d (Fn [Camera2D] Matrix) "GetCameraMatrix2D")
  (register get-world-to-screen (Fn [Vector3 Camera] Vector2) "GetWorldToScreen")
  (register get-world-to-screen-ex (Fn [Vector3 Camera Int Int] Vector2) "GetWorldToScreenEx")
  (register get-world-to-screen-2d (Fn [Vector2 Camera2D] Vector2) "GetWorldToScreen2D")
  (register get-screen-to-world-2d (Fn [Vector2 Camera2D] Vector2) "GetScreenToWorld2D")
  
  ;;timing functions
  (register set-target-fps (Fn [Int] ()) "SetTargetFPS")
  (register get-fps (Fn [] Int) "GetFPS")
  (register get-frame-time (Fn [] Float) "GetFrameTime")
  (register get-time (Fn [] Double) "GetTime")

  ;;color functions
  (register color-to-int (Fn [Color] Int) "ColorToInt")
  (register color-normalize (Fn [Color] Vector4) "ColorNormalize")
  (register color-from-normalized (Fn [Vector4] Color) "ColorFromNormalized")
  (register color-to-hsv (Fn [Color] Vector3) "ColorToHSV")
  (register color-from-hsv (Fn [Vector3] Color) "ColorFromHSV")
  (register get-color (Fn [Int] Color) "GetColor")
  (register fade (Fn [Color Float] Color) "Fade")

  ;;misc functions
  (register set-config-clags (Fn [Uint32] ()) "SetConfigFlags")
  (register set-trace-log-level (Fn [Int] ()) "SetTraceLogLevel")
  (register set-trace-log-exit (Fn [Int] ()) "SetTraceLogExit")
  (register set-trace-log-callback (Fn [TraceLogCallback] ()) "SetTraceLogCallback")
  ;;(register trace-log (Fn [Int (Ptr Char)]) "TraceLog") ;;not sure how to implement rest parameters
  (register take-screenshot (Fn [(Ptr Char)] ()) "TakeScreenshot")
  (register get-random-value (Fn [Int Int] Int) "GetRandomValue")

  ;;file management functions
  (register file-exists (Fn [(Ptr Char)] Bool) "FileExists")
  (register is-file-extension (Fn [(Ptr Char) (Ptr Char)] Bool) "IsFileExtension")
  (register directory-exists (Fn [(Ptr Char)] Bool) "DirectoryExists")
  (register get-extension (Fn [(Ptr Char)] (Ptr Char)) "GetExtension")
  (register get-file-name (Fn [(Ptr Char)] (Ptr Char)) "GetFileName")
  (register get-file-name-without-ext (Fn [(Ptr Char)] (Ptr Char)) "GetFileNameWithoutExt")
  (register get-directory-path (Fn [(Ptr Char)] (Ptr Char)) "GetDirectoryPath")
  (register get-prev-directory-path (Fn [(Ptr Char)] (Ptr Char)) "GetPrevDirectoryPath")
  (register get-working-directory (Fn [(Ptr Char)] (Ptr Char)) "GetWorkingDirectory")
  (register get-directory-files (Fn [(Ptr Char) Int] (Ptr (Ptr Char))) "GetDirectoryFiles")
  (register clear-directory-files (Fn [] ()) "ClearDirectoryFiles")
  (register change-directory (Fn [(Ptr Char)] Bool) "ChangeDirectory")
  (register is-file-dropped (Fn [] Bool) "IsFileDropped")
  (register get-dropped-files (Fn [(Ptr Int)] (Ptr (Ptr Char))) "GetDroppedFiles")
  (register clear-dropped-files (Fn [] ()) "ClearDroppedFiles")
  (register get-file-mod-time (Fn [(Ptr Char)] Long) "GetFileModTime")
  
  (register compress-data (Fn [(Ptr Byte) Int (Ptr Int)] (Ptr Byte)) "CompressData")
  (register decompress-data (Fn [(Ptr Byte) Int (Ptr Int)] (Ptr Byte)) "DecompressData")
  
  ;;persistent storage management
  (register storage-save-value (Fn [Int Int] ()) "StorageSaveValue")
  (register storage-load-value (Fn [Int] Int) "StorageLoadValue")
  (register open-url (Fn [(Ptr Char)] ()) "OpenURL")

  ;;input functions: keyboard
  (register is-key-pressed (Fn [Int] Bool) "IsKeyPressed")
  (register is-key-down (Fn [Int] Bool) "IsKeyDown")
  (register is-key-released (Fn [Int] Bool) "IsKeyReleased")
  (register is-key-up (Fn [Int] Bool) "IsKeyUp")
  (register set-exit-key (Fn [Int] ()) "SetExitKey")
  (register get-key-pressed (Fn [] Int) "GetKeyPressed")

  ;;input functions: gamepads
  (register is-gamepad-available (Fn [Int] Bool) "IsGamepadAvailable")
  (register is-gamepad-name (Fn [Int (Ptr Char)] Bool) "IsGamepadName")
  (register get-gamepad-name (Fn [Int] (Ptr Char)) "GetGamepadName")
  (register is-gamepad-button-pressed (Fn [Int Int] Bool) "IsGamepadButtonPressed")
  (register is-gamepad-button-down (Fn [Int Int] Bool) "IsGamepadButtonDown")
  (register is-gamepad-button-released (Fn [Int Int] Bool) "IsGamepadButtonReleased")
  (register is-gamepad-button-up (Fn [Int Int] Bool) "IsGamepadButtonUp")
  (register get-gamepad-button-pressed (Fn [] Int) "GetGamepadButtonPressed")
  (register get-gamepad-axis-count (Fn [Int] Int) "GetGamepadAxisCount")
  (register get-gamepad-axis-movement (Fn [Int Int] Float) "GetGamepadAxisMovement")
  
  ;;input functions: mouse
  (register is-mouse-button-pressed (Fn [Int] Bool) "IsMouseButtonPressed")
  (register is-mouse-button-down (Fn [Int] Bool) "IsMouseButtonDown")
  (register is-mouse-button-released (Fn [Int] Bool) "IsMouseButtonReleased")
  (register is-mouse-button-up (Fn [Int] Bool) "IsMouseButtonUp")
  (register get-mouse-x (Fn [] Int) "GetMouseX")
  (register get-mouse-y (Fn [] Int) "GetMouseY")
  (register get-mouse-position (Fn [] Vector2) "GetMousePosition")
  (register set-mouse-position (Fn [Int Int] ()) "SetMousePosition")
  (register set-mouse-offset (Fn [Int Int] ()) "SetMouseOffset")
  (register set-mouse-scale (Fn [Float Float] ()) "SetMouseScale")
  (register get-mouse-wheel-move (Fn [] Int) "GetMouseWheelMove")
  
  ;;input functions: touch
  (register get-touch-x (Fn [] Int) "GetTouchX")
  (register get-touch-y (Fn [] Int) "GetTouchY")
  (register get-touch-position (Fn [Int] Vector2) "GetTouchPosition"))

(defmodule Gestures
  (register set-gestures-enabled (Fn [Uint32] ()) "SetGesturesEnabled")
  (register is-gesture-detected (Fn [Int] Bool) "IsGestureDetected")
  (register get-gesture-detected (Fn [] Int) "GetGestureDetected")
  (register get-touch-points-count (Fn [] Int) "GetTouchPointsCount")
  (register get-gesture-hold-duration (Fn [] Float) "GetGestureHoldDuration")
  (register get-gesture-drag-vector (Fn [] Vector2) "GetGestureDragVector")
  (register get-gesture-drag-angle (Fn [] Float) "GetGestureDragAngle")
  (register get-gesture-pinch-vector (Fn [] Vector2) "GetGesturePinchVector")
  (register get-gesture-pinch-angle (Fn [] Float) "GetGesturePinchAngle"))

(defmodule Camera
  (register set-camera-mode (Fn [Camera Int] ()) "SetCameraMode")
  (register update-camera (Fn [(Ptr Camera)] ()) "UpdateCamera")
  (register set-camera-pan-control (Fn [Int] ()) "SetCameraPanControl")
  (register set-camera-alt-control (Fn [Int] ()) "SetCameraAltControl")
  (register set-camera-smooth-zoom-control (Fn [Int] ()) "SetCameraSmoothZoomControl")
  (register set-camera-move-controls (Fn [Int Int Int Int Int Int] ()) "SetCameraMoveControls"))

(defmodule Shapes
  (register draw-pixel (Fn [Int Int Color] ()) "DrawPixel")
  (register draw-pixel-v (Fn [Vector2 Color] ()) "DrawPixelV")
  (register draw-line (Fn [Int Int Int Int Color] ()) "DrawLine")
  (register draw-line-v (Fn [Vector2 Vector2 Color] ()) "DrawLineV")
  (register draw-line-ex (Fn [Vector2 Vector2 Float Color] ()) "DrawLineEx")
  (register draw-line-bezier (Fn [Vector2 Vector2 Float Color] ()) "DrawLineBezier")
  (register draw-line-strip (Fn [(Ptr Vector2) Int Color] ()) "DrawLineStrip")
  (register draw-circle (Fn [Int Int Float Color] ()) "DrawCirlce")
  (register draw-circle-sector (Fn [Vector2 Float Int Int Int Color] ()) "DrawCircleSector")
  (register draw-circle-sector-lines (Fn [Vector2 Float Int Int Int Color] ()) "DrawCircleSectorLines")
  (register draw-circle-gradient (Fn [Int Int Float Color Color] ()) "DrawCircleGradient")
  (register draw-circle-v (Fn [Vector2 Float Color] ()) "DrawCircleV")
  (register draw-cicle-lines (Fn [Int Int Float Color] ()) "DrawCircleLines")
  (register draw-ellipse (Fn [Int Int Float Float Color] ()) "DrawEllipse")
  (register draw-ellipse-lines (Fn [Int Int Float Float Color] ()) "DrawEllipseLines")
  (register draw-ring (Fn [Vector2 Float Float Int Int Int Color] ()) "DrawRing")
  (register draw-ring-lines (Fn [Vector2 Float Float Int Int Int Color] ()) "DrawRingLines")
  (register draw-rectangle (Fn [Int Int Int Int Color] ()) "DrawRectangle")
  (register draw-rectangle-v (Fn [Vector2 Vector2 Color] ()) "DrawRectangleV")
  (register draw-rectangle-rec (Fn [Rectangle Color] ()) "DrawRectangleRec")
  (register draw-rectangle-pro (Fn [Rectangle Vector2 Float Color] ()) "DrawRectanglePro")
  (register draw-rectangle-gradient-v (Fn [Int Int Int Int Color Color] ()) "DrawRectangleGradientV")
  (register draw-rectangle-gradient-h (Fn [Int Int Int Int Color Color] ()) "DrawRectangleGradientH")
  (register draw-rectangle-gradient-ex (Fn [Rectangle Color Color Color Color] ()) "DrawRectangleGradientEx")
  (register draw-rectangle-lines (Fn [Int Int Int Int Color] ()) "DrawRectangleLines")
  (register draw-rectangle-lines-ex (Fn [Rectangle Int Color] ()) "DrawRectangleLinesEx")
  (register draw-rectangle-rounded (Fn [Rectangle Float Int Color] ()) "DrawRectangleRounded")
  (register draw-rectangle-rounded-lines (Fn [Rectangle Float Int Int Color] ()) "DrawRectangleRoundedLines")
  (register draw-triangle (Fn [Vector2 Vector2 Vector2 Color] ()) "DrawTriangle")
  (register draw-triangle-lines (Fn [Vector2 Vector2 Vector2 Color] ()) "DrawTriangleLines")
  (register draw-triangle-fan (Fn [(Ptr Vector2) Int Color] ()) "DrawTriangleFan")
  (register draw-triangle-strip (Fn [(Ptr Vector2) Int Color] ()) "DrawTriangleStrip")
  (register draw-poly (Fn [Vector2 Int Float Float Color] ()) "DrawPoly")
  (register draw-poly-lines (Fn [Vector2 Int Float Float Color] ()) "DrawPolyLines")
  (register set-shapes-texture (Fn [Texture2D Rectangle] ()) "SetShapesTexture")
  
  ;;basic shapes collision detection functions
  (register check-collision-recs (Fn [Rectangle Rectangle] Bool) "CheckCollisionRecs")
  (register check-collision-circles (Fn [Vector2 Float Vector2 Float] ()) "CheckCollisionCircles")
  (register check-collision-circle-rec (Fn [Vector2 Float Rectangle] Bool) "CheckCollisionCircleRec")
  (register get-collision-rec (Fn [Rectangle Rectangle] Rectangle) "GetCollisionRec")
  (register check-collision-point-rec (Fn [Vector2 Rectangle] Bool) "CheckCollisionPointRec")
  (register check-collision-point-circle (Fn [Vector2 Vector2 Float] Bool) "CheckCollisionPointCircle")
  (register check-collision-point-triangle (Fn [Vector2 Vector2 Vector2 Vector2] Bool) "CheckCollisionPointTriangle"))

(defmodule Textures
  (register load-image (Fn [(Ptr Char)] Image) "LoadImage")
  (register load-image-ex (Fn [(Ptr Color) Int Int] Image) "LoadImageEx")
  (register load-image-pro (Fn [VoidPtr Int Int Int] Image) "LoadImagePro")
  (register load-image-raw (Fn [(Ptr Char) Int Int Int Int] Image) "LoadImageRaw")
  (register export-image (Fn [Image (Ptr Char)] ()) "ExportImage")
  (register export-image-as-code (Fn [Image (Ptr Char)] ()) "ExportImageAsCode")
  (register load-texture (Fn [(Ptr Char)] Texture2D) "LoadTexture")
  (register load-texture-from-image (Fn [Image] Texture2D) "LoadTextureFromImage")
  (register load-texture-cubemap (Fn [Image Int] TextureCubemap) "LoadTextureCubemap")
  (register load-render-texture (Fn [Int Int] RenderTexture2D) "LoadRenderTexture")
  (register unload-image (Fn [Image] ()) "UnloadImage")
  (register unload-texture (Fn [Texture2D] ()) "UnloadTexture")
  (register unload-render-texture (Fn [RenderTexture2D] ()) "UnloadRenderTexture")
  (register get-image-data (Fn [Image] (Ptr Color)) "GetImageData")
  (register get-image-data-normalized (Fn [Image] (Ptr Vector4)) "GetImageDataNormalized")
  (register get-image-alpha-border (Fn [Image Float] Rectangle) "GetImageAlphaBorder")
  (register get-pixel-data-size (Fn [Int Int Int] Int) "GetPixelDataSize")
  (register get-texture-data (Fn [Texture2D] Image) "GetTextureData")
  (register get-screen-data (Fn [] Image) "GetScreenData")
  (register update-texture (Fn [Texture2D VoidPtr] ()) "UpdateTexture")
  
  ;;image manipulation functions
  (register image-copy (Fn [Image] Image) "ImageCopy")
  (register image-from-image (Fn [Image Rectangle] Image) "ImageFromImage")
  (register image-to-pot (Fn [(Ptr Image) Color] ()) "ImageToPOT")
  (register image-format (Fn [(Ptr Image) Int] ()) "ImageFormat")
  (register image-alpha-mask (Fn [(Ptr Image) Image] ()) "ImageAlphaMask")
  (register image-alpha-clear (Fn [(Ptr Image) Color Float] ()) "ImageAlphaClear")
  (register image-alpha-crop (Fn [(Ptr Image) Float] ()) "ImageAlphaCrop")
  (register image-alpha-premultiply (Fn [(Ptr Image)] ()) "ImageAlphaPremultiply")
  (register image-crop (Fn [(Ptr Image) Rectangle] ()) "ImageCrop")
  (register image-resize (Fn [(Ptr Image) Int Int] ()) "ImageResize")
  (register image-resize-nn (Fn [(Ptr Image) Int Int] ()) "ImageResizeNN")
  (register image-resize-canvas (Fn [(Ptr Image) Int Int Int Int Color] ()) "ImageResizeCanvas")
  (register image-mipmaps (Fn [(Ptr Image)] ()) "ImageMipmaps")
  (register image-dither (Fn [(Ptr Image) Int Int Int Int] ()) "ImageDither")
  (register image-extract-palette (Fn [Image Int (Ptr Int)] (Ptr Color)) "ImageExtractPalette")
  (register image-text (Fn [(Ptr Char) Int Color] Image) "ImageText")
  (register image-text-ex (Fn [Font (Ptr Char) Float Float Color] Image) "ImageTextEx")
  (register image-draw (Fn [(Ptr Image) Image Rectangle Rectangle Color] ()) "ImageDraw")
  (register image-draw-rectangle (Fn [(Ptr Image) Rectangle Color] ()) "ImageDrawRectangle")
  (register image-draw-rectangle-lines (Fn [(Ptr Image) Rectangle Int Color] ()) "ImageDrawRectangleLines")
  (register image-draw-text (Fn [(Ptr Image) Vector2 (Ptr Char) Int Color] ()) "ImageDrawText")
  (register image-draw-text-ex (Fn [(Ptr Image) Vector2 Font (Ptr Char) Float Float Color] ()) "ImageDrawTextEx")
  (register image-flip-vertical (Fn [(Ptr Image)] ()) "ImageFlipVertical")
  (register image-flip-horizontal (Fn [(Ptr Image)] ()) "ImageFlipHorizontal")
  (register image-rotate-cw (Fn [(Ptr Image)] ()) "ImageRotateCW")
  (register image-rotate-ccw (Fn [(Ptr Image)] ()) "ImageRotateCCW")
  (register image-color-tint (Fn [(Ptr Image) Color] ()) "ImageColorTint")
  (register image-color-invert (Fn [(Ptr Image)] ()) "ImageColorInvert")
  (register image-color-grayscale (Fn [(Ptr Image)] ()) "ImageColorGrayscale")
  (register image-color-contrast (Fn [(Ptr Image) Float] ()) "ImageColorContrast")
  (register image-color-brightness (Fn [(Ptr Image) Int] ()) "ImageColorBrightness")
  (register image-color-replace (Fn [(Ptr Image) Color Color] ()) "ImageColorReplace")
  
  ;;image generation functions
  (register gen-image-color (Fn [Int Int Color] Image) "GenImageColor")
  (register gen-image-gradient-v (Fn [Int Int Color Color] Image) "GenImageGradientV")
  (register gen-image-gradient-h (Fn [Int Int Color Color] Image) "GenImageGradientH")
  (register gen-image-gradient-radial (Fn [Int Int Float Color Color] Image) "GenImageGradientRadial")
  (register gen-image-checked (Fn [Int Int Int Int Color Color] Image) "GenImageChecked")
  (register gen-image-white-noise (Fn [Int Int Float] Image) "GenImageWhiteNoise")
  (register gen-image-perlin-noise (Fn [Int Int Int Int Float] Image) "GenImagePerlinNoise")
  (register gen-image-cellular (Fn [Int Int Int] Image) "GenImageCellular")
  
  ;;Texture2D config functions
  (register gen-texture-mipmaps (Fn [(Ptr Texture2D)] ()) "GenTextureMipmaps")
  (register set-texture-filter (Fn [Texture2D Int] ()) "SetTextureFilter")
  (register set-texture-wrap (Fn [Texture2D Int] ()) "SetTextureWrap")
  
  ;;Texture2D drawing functions
  (register draw-texture (Fn [Texture2D Int Int Color] ()) "DrawTexture")
  (register draw-texture-v (Fn [Texture2D Vector2 Color] ()) "DrawTextureV")
  (register draw-texture-ex (Fn [Texture2D Vector2 Float Float Color] ()) "DrawTextureEx")
  (register draw-texture-rec (Fn [Texture2D Rectangle Vector2 Color] ()) "DrawTextureRec")
  (register draw-texture-quad (Fn [Texture2D Vector2 Vector2 Rectangle Color] ()) "DrawTextureQuad")
  (register draw-texture-pro (Fn [Texture2D Rectangle Rectangle Vector2 Float Color] ()) "DrawTexturePro")
  (register draw-texture-npatch (Fn [Texture2D NPatchInfo Rectangle Vector2 Float Color] ()) "DrawTextureNPatch"))

(defmodule Text
  (register get-font-default (Fn [] Font) "GetFontDefault")
  (register load-font (Fn [(Ptr Char)] Font) "LoadFont")
  (register load-font-ex (Fn [(Ptr Char) Int (Ptr Int) Int] Font) "LoadFontEx")
  (register load-font-from-image (Fn [Image Color Int] Font) "LoadFontFromImage")
  (register load-font-data (Fn [(Ptr Char) Int (Ptr Int) Int Int] (Ptr CharInfo)) "LoadFontData")
  (register gen-image-font-atlas (Fn [(Ptr CharInfo) (Ptr (Ptr Rectangle)) Int Int Int Int] Image) "GenImageFontAtlas")
  (register unload-font (Fn [Font] ()) "UnloadFont")
  
  ;;text drawing functions
  (register draw-fps (Fn [Int Int] ()) "DrawFPS")
  (register draw-text (Fn [(Ptr Char) Int Int Int (Color)] ()) "DrawText")
  (register draw-text-ex (Fn [Font (Ptr Char) Vector2 Float Float Color] ()) "DrawTextEx")
  (register draw-text-rec (Fn [Font (Ptr Char) Rectangle Float Float Bool Color] ()) "DrawTextRec")
  (register draw-text-rec-ex (Fn [Font (Ptr Char) Rectangle Float Float Bool Color
                                  Int Int Color Color] ()) "DrawTextRecEx")
  (register draw-text-codepoint (Fn [Font Int Vector2 Float Color] ()) "DrawTextCodepoint")
  
  ;;text misc functions
  (register measure-text (Fn [(Ptr Char) Int] Int) "MeasureText")
  (register measure-text-ex (Fn [Font (Ptr Char) Float Float] Vector2) "MeasureTextEx")
  (register get-glyph-index (Fn [Font Int] Int) "GetGlyphIndex")
  
  ;;text strings management functions
  (register text-copy (Fn [(Ptr Char) (Ptr Char)] Int) "TextCopy")
  (register text-is-equal (Fn [(Ptr Char) (Ptr Char)] Bool) "TextIsEqual")
  (register text-length (Fn [(Ptr Char)] Uint32) "TextLength")
  ;;(register text-format (Fn [(Ptr Char)] (Ptr Char)) "TextFormat") ;;need to figure out how to bind to this one properly. the use of rest parameters complicates things. may not be necessary, though
  (register text-subtext (Fn [(Ptr Char) Int Int] (Ptr Char)) "TextSubtext")
  (register text-replace (Fn [(Ptr Char) (Ptr Char) (Ptr Char)] (Ptr Char)) "TextReplace")
  (register text-insert (Fn [(Ptr Char) (Ptr Char) Int] (Ptr Char)) "TextInsert")
  (register text-join (Fn [(Ptr (Ptr Char)) Int (Ptr Char)] (Ptr Char)) "TextJoin")
  (register text-split (Fn [(Ptr Char) Char (Ptr Int)] (Ptr (Ptr Char))) "TextSplit")
  (register text-append (Fn [(Ptr Char) (Ptr Char) (Ptr Int)] ()) "TextAppend")
  (register text-find-index (Fn [(Ptr Char) (Ptr Char)] Int) "TextFindIndex")
  (register text-to-upper (Fn [(Ptr Char)] (Ptr Char)) "TextToUpper")
  (register text-to-lower (Fn [(Ptr Char)] (Ptr Char)) "TextToLower")
  (register text-to-pascal (Fn [(Ptr Char)] (Ptr Char)) "TextToPascal")
  (register text-to-integer (Fn [(Ptr Char)] Int) "TextToInteger")
  (register text-to-utf8 (Fn [(Ptr Int) Int] (Ptr Char)) "TextToUtf8")

  ;;utf8 text strings management functions
  (register get-codepoints (Fn [(Ptr Char) (Ptr Int)] (Ptr Int)) "GetCodepoints")
  (register get-codepoints-count (Fn [(Ptr Char)] Int) "GetCodepointsCount")
  (register get-next-codepoint (Fn [(Ptr Char) (Ptr Int)] Int) "GetNextCodepoint")
  (register codepoint-to-utf8 (Fn [Int (Ptr Int)] (Ptr Char)) "CodepointToUtf8"))

(defmodule Models
  (register draw-line-3d (Fn [Vector3 Vector3 Color] ()) "DrawLine3D")
  (register draw-point-3d (Fn [Vector3 Color] ()) "DrawPoint3D")
  (register draw-circle-3d (Fn [Vector3 Float Vector3 Float Color] ()) "DrawCircle3D")
  (register draw-cube (Fn [Vector3 Float Float Float Color] ()) "DrawCube")
  (register draw-cube-v (Fn [Vector3 Vector3 Color] ()) "DrawCubeV")
  (register draw-cube-wires (Fn [Vector3 Float Float Float Color] ()) "DrawCubeWires")
  (register draw-cube-wires-v (Fn [Vector3 Vector3 Color] ()) "DrawCubeWiresV")
  (register draw-cube-texture (Fn [Texture2D Vector3 Float Float Float Color] ()) "DrawCubeTexture")
  (register draw-sphere (Fn [Vector3 Float Color] ()) "DrawSphere")
  (register draw-sphere-ex (Fn [Vector3 Float Int Int Color] ()) "DrawSphereEx")
  (register draw-sphere-wires (Fn [Vector3 Float Int Int Color] ()) "DrawSphereWires")
  (register draw-cylinder (Fn [Vector3 Float Float Float Int Color] ()) "DrawCylinder")
  (register draw-cylinder-wires (Fn [Vector3 Float Float Float Int Color] ()) "DrawCylinderWires")
  (register draw-plane (Fn [Vector3 Vector2 Color] ()) "DrawPlane")
  (register draw-ray (Fn [Ray Color] ()) "DrawRay")
  (register draw-grid (Fn [Int Float] ()) "DrawGrid")
  (register draw-gizmo (Fn [Vector3] ()) "DrawGizmo")
  
  ;;model (un)loading functions
  (register load-model (Fn [(Ptr Char)] Model) "LoadModel")
  (register load-model-from-mesh (Fn [Mesh] Model) "LoadModelFromMesh")
  (register unload-model (Fn [Model] ()) "UnloadModel")
  
  ;;mesh (un)loading functions
  (register load-meshes (Fn [(Ptr Char) (Ptr Int)] (Ptr Mesh)) "LoadMeshes")
  (register export-mesh (Fn [Mesh (Ptr Char)] ()) "ExportMesh")
  (register unload-mesh (Fn [Mesh] ()) "UnloadMesh")
  
  ;;material (un)loading functions
  (register load-materials (Fn [(Ptr Char) (Ptr Int)] (Ptr Material)) "LoadMaterials")
  (register load-material-default (Fn [] Material) "LoadMaterialDefault")
  (register unload-material (Fn [Material] ()) "UnloadMaterial")
  (register set-material-texture (Fn [(Ptr Material) Int Texture2D] ()) "SetMaterialTexture")
  (register set-model-mesh-material (Fn [(Ptr Model) Int Int] ()) "SetModelMeshMaterial")

  ;;model animations (un)loading functions
  (register load-model-animations (Fn [(Ptr Char) (Ptr Int)] (Ptr ModelAnimation)) "LoadModelAnimations")
  (register update-model-animation (Fn [Model ModelAnimation Int] ()) "UpdateModelAnimation")
  (register unload-model-animation (Fn [ModelAnimation] ()) "UnloadModelAnimation")
  (register is-model-animation-valid (Fn [Model ModelAnimation] Bool) "IsModelAnimationValid")

  ;;mesh generation functions
  (register gen-mesh-poly (Fn [Int Float] Mesh) "GenMeshPoly")
  (register gen-mesh-plane (Fn [Float Float Int Int] Mesh) "GenMeshPlane")
  (register gen-mesh-cube (Fn [Float Float Float] Mesh) "GenMeshCube")
  (register gen-mesh-sphere (Fn [Float Int Int] Mesh) "GenMeshSphere")
  (register gen-mesh-hemisphere (Fn [Float Int Int] Mesh) "GenMeshHemiSphere")
  (register gen-mesh-cylinder (Fn [Float Float Int] Mesh) "GenMeshCylinder")
  (register gen-mesh-torus (Fn [Float Float Int Int] Mesh) "GenMeshTorus")
  (register gen-mesh-knot (Fn [Float Float Int Int] Mesh) "GenMeshKnot")
  (register gen-mesh-heightmap (Fn [Image Vector3] Mesh) "GenMeshHeightmap")
  (register gen-mesh-cubicmap (Fn [Image Vector3] Mesh) "GenMeshCubicmap")
  
  ;;mesh manipulation functions
  (register mesh-bounding-box (Fn [Mesh] BoundingBox) "MeshBoundingBox")
  (register mesh-tangents (Fn [(Ptr Mesh)] ()) "MeshTangents")
  (register mesh-binormals (Fn [(Ptr Mesh)] ()) "MeshBinormals")

  ;;model drawing functions
  (register draw-model (Fn [Model Vector3 Float Color] ()) "DrawModel")
  (register draw-model-ex (Fn [Model Vector3 Vector3 Float Vector3 Color] ()) "DrawModelEx")
  (register draw-model-wires (Fn [Model Vector3 Float Color] ()) "DrawModelWires")
  (register draw-model-wires-ex (Fn [Model Vector3 Vector3 Float Vector3 Color] ()) "DrawModelWiresEx")
  (register draw-bounding-box (Fn [BoundingBox Color] ()) "DrawBoundingBox")
  (register draw-billboard (Fn [Camera Texture2D Vector3 Float Color] ()) "DrawBillboard")
  (register draw-billboard-rec (Fn [Camera Texture2D Rectangle Vector3 Float Color] ()) "DrawBillboardRec")

  ;;collision detection functions
  (register check-collision-spheres (Fn [Vector3 Float Vector3 Float] Bool) "CheckCollisionSpheres")
  (register check-collision-boxes (Fn [BoundingBox BoundingBox] Bool) "CheckCollisionBoxes")
  (register check-collision-box-sphere (Fn [BoundingBox Vector3 Float] Bool) "CheckCollisionBoxSphere")
  (register check-collision-ray-sphere (Fn [Ray Vector3 Float] Bool) "CheckCollisionRaySphere")
  (register check-collision-ray-sphere-ex (Fn [Ray Vector3 Float (Ptr Vector3)] Bool) "CheckCollisionRaySphereEx")
  (register check-collision-ray-box (Fn [Ray BoundingBox] Bool) "CheckCollisionRayBox")
  (register get-collision-ray-model (Fn [Ray Model] RayHitInfo) "GetCollisionRayModel")
  (register get-collision-ray-triangle (Fn [Ray Vector3 Vector3 Vector3] RayHitInfo) "GetCollisionRayTriangle")
  (register get-collision-ray-ground (Fn [Ray Float] RayHitInfo) "GetCollisionRayGround"))

(defmodule Shaders
  ;;shader (un)loading functions
  (register load-text (Fn [(Ptr Char)] (Ptr Char)) "LoadText")
  (register load-shader (Fn [(Ptr Char) (Ptr Char)] Shader) "LoadShader")
  (register load-shader-code (Fn [(Ptr Char) (Ptr Char)] Shader) "LoadShaderCode")
  (register unload-shader (Fn [Shader] ()) "UnloadShader")
  
  (register get-shader-default (Fn [] Shader) "GetShaderDefault")
  (register get-texture-default (Fn [] Texture2D) "GetTextureDefault")
  
  ;;shader configuration functions
  (register get-shader-location (Fn [Shader (Ptr Char)] Int) "GetShaderLocation")
  (register set-shader-value (Fn [Shader Int VoidPtr Int] ()) "SetShaderValue")
  (register set-shader-value-v (Fn [Shader Int VoidPtr Int Int] ()) "SetShaderValueV")
  (register set-shader-value-matrix (Fn [Shader Int Matrix] ()) "SetShaderValueMatrix")
  (register set-matrix-projection (Fn [Matrix] ()) "SetMatrixProjection")
  (register set-matrix-modelview (Fn [Matrix] ()) "SetMatrixModelview")
  (register get-matrix-modelview (Fn [] Matrix) "GetMatrixModelview")
  (register get-matrix-projection (Fn [] Matrix) "GetMatrixProjection")
  
  ;;texture maps generation (PBR)
  (register gen-texture-cubemap (Fn [Shader Texture2D Int] Texture2D) "GenTextureCubemap")
  (register gen-texture-irradiance (Fn [Shader Texture2D Int] Texture2D) "GenTextureIrradiance")
  (register gen-texture-prefilter (Fn [Shader Texture2D Int] Texture2D) "GenTexturePrefilter")
  (register gen-texture-brdf (Fn [Shader Int] Texture2D) "GenTextureBRDF")
  
  ;;shading begin/end functions
  (register begin-shader-mode (Fn [Shader] ()) "BeginShaderMode")
  (register end-shader-mode (Fn [] ()) "EndShaderMode")
  (register begin-blend-mode (Fn [Int] ()) "BeginBlendMode")
  (register end-blend-mode (Fn [] ()) "EndBlendMode")
  
  ;;VR control functions
  (register init-vr-simulator (Fn [] ()) "InitVrSimulator")
  (register close-vr-simulator (Fn [] ()) "CloseVrSimulator")
  (register update-vr-tracking (Fn [(Ptr Camera)] ()) "UpdateVrTracking")
  (register set-vr-configuration (Fn [VrDeviceInfo Shader] ()) "SetVrConfiguration")
  (register is-vr-simulator-ready (Fn [] Bool) "IsVrSimulatorReady")
  (register toggle-vr-mode (Fn [] ()) "ToggleVrMode")
  (register begin-vr-drawing (Fn [] ()) "BeginVrDrawing")
  (register end-vr-drawing (Fn [] ()) "EndVrDrawing"))

(defmodule Audio
  (register init-audio-device (Fn [] ()) "InitAudioDevice")
  (register close-audio-device (Fn [] ()) "CloseAudioDevice")
  (register is-audio-device-ready (Fn [] Bool) "IsAudioDeviceReady")
  (register set-master-volume (Fn [Float] ()) "SetMasterVolume")

  ;;wave/sound loading/unloading functions
  (register load-wave (Fn [(Ptr Char)] Wave) "LoadWave")
  (register load-sound (Fn [(Ptr Char)] Sound) "LoadSound")
  (register load-sound-from-wave (Fn [Wave] Sound) "LoadSoundFromWave")
  (register update-sound (Fn [Sound VoidPtr Int] ()) "UpdateSound")
  (register unload-wave (Fn [Wave] ()) "UnloadWave")
  (register unload-sound (Fn [Sound] ()) "UnloadSound")
  (register export-wave (Fn [Wave (Ptr Char)] ()) "ExportWave")
  (register export-wave-as-code (Fn [Wave (Ptr Char)] ()) "ExportWaveAsCode")
  
  ;;wave/sound management functions
  (register play-sound (Fn [Sound] ()) "PlaySound")
  (register stop-sound (Fn [Sound] ()) "StopSound")
  (register pause-sound (Fn [Sound] ()) "PauseSound")
  (register resume-sound (Fn [Sound] ()) "ResumeSound")
  (register play-sound-multi (Fn [Sound] ()) "PlaySoundMulti")
  (register stop-sound-multi (Fn [] ()) "StopSoundMulti")
  (register get-sounds-playing (Fn [] Int) "GetSoundsPlaying")
  (register is-sound-playing (Fn [Sound] Bool) "IsSoundPlaying")
  (register set-sound-volume (Fn [Sound Float] ()) "SetSoundVolume")
  (register set-sound-pitch (Fn [Sound Float] ()) "SetSoundPitch")
  (register wave-format (Fn [(Ptr Wave) Int Int Int] ()) "WaveFormat")
  (register wave-copy (Fn [Wave] Wave) "WaveCopy")
  (register wave-crop (Fn [(Ptr Wave) Int Int] ()) "WaveCrop")
  (register get-wave-data (Fn [Wave] (Ptr Float)) "GetWaveData")

  ;;music management functions
  (register load-music-stream (Fn [(Ptr Char)] Music) "LoadMusicStream")
  (register unload-music-stream (Fn [Music] ()) "UnloadMusicStream")
  (register play-music-stream (Fn [Music] ()) "PlayMusicStream")
  (register update-music-stream (Fn [Music] ()) "UpdateMusicStream")
  (register stop-music-stream (Fn [Music] ()) "StopMusicStream")
  (register pause-music-stream (Fn [Music] ()) "PauseMusicStream")
  (register resume-music-stream (Fn [Music] ()) "ResumeMusicStream")
  (register is-music-playing (Fn [Music] Bool) "IsMusicPlaying")
  (register set-music-volume (Fn [Music Float] ()) "SetMusicVolume")
  (register set-music-pitch (Fn [Music Float] ()) "SetMusicPitch")
  (register set-music-loop-count (Fn [Music Int] ()) "SetMusicLoopCount")
  (register get-music-time-length (Fn [Music] Float) "GetMusicTimeLength")
  (register get-music-time-played (Fn [Music] Float) "GetMusicTimePlayed")
  
  (register init-audio-stream (Fn [Uint32 Uint32 Uint32] AudioStream) "InitAudioStream")
  (register update-audio-stream (Fn [Audiostream VoidPtr Int] ()) "UpdateAudioStream")
  (register close-audio-stream (Fn [AudioStream] ()) "CloseAudioStream")
  (register is-audio-stream-processed (Fn [AudioStream] Bool) "IsAudioStreamProcessed")
  (register play-audio-stream (Fn [AudioStream] ()) "PlayAudioStream")
  (register pause-audio-stream (Fn [AudioStream] ()) "PauseAudioStream")
  (register resume-audio-stream (Fn [AudioStream] ()) "ResumeAudioStream")
  (register is-audio-stream-playing (Fn [AudioStream] Bool) "IsAudioStreamPlaying")
  (register stop-audio-stream (Fn [AudioStream] ()) "StopAudioStream")
  (register set-audio-stream-volume (Fn [AudioStream Float] ()) "SetAudioStreamVolume")
  (register set-audio-steam-pitch (Fn [AudioStream Float] ()) "SetAudioStreamPitch"))